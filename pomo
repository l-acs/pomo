#!/bin/python3
# Make pomo script more sane
# todo: say time starting and ending

import re
import requests
from time import sleep
from sys import argv
from os import system as sh
from os import environ as env

timer_cmd = "mpv --force-window --loop-playlist=inf --really-quiet ~/.scripts/input/ringtone.webm && dunstctl close-all"
home = env.get("HOME", "/home/user")
url = env.get("NTFY_POMO_URL")
logfile = f"{home}/.scripts/output/pomo.log"
default_duration = "25m"

def parse_time (arg):
    regex = r"(\d+)([smh])([eior]?[cnu]?[sr]?[s]?)?(.*)?" #jank
    try:  # fixme: this still matches 20j20s, somehow
        match = re.search (regex, arg)
        if match:
            num = int(match.group(1))
            suffix = match.group(2)
            result = num if (suffix == 's') \
                else 60 * num if suffix == 'm' \
                     else 60 * 60 * num

            rest = match.group(4)
            return result if not rest else result + parse_time (rest)

        else:
            return 60 * int(arg) # it's just a number, interpret that
                                 # as minutes
    except:
        # invalid time
        return None


# def gen_human_time (t):
#     return t if t else default_duration

def gen_seconds (s):
    return s if s else parse_time(default_duration)

def is_pomo (seconds):
    return seconds == parse_time(default_duration)

def pomo_or_timer (b):
    return "Pomodoro" if b else "Timer"

def pomo_format (seconds, title, insert):
    s = gen_seconds(seconds)
    msg = pomo_or_timer(is_pomo(s)) + insert + (": " + title if title else "")
    return msg


def log_time (filename, pomo_type, title, human_time, seconds):
    label = pomo_format(seconds, title, "")
    time_record = human_time + " " + "(" + str(seconds) + " " + ("second" if seconds == 1 else "seconds") + ")"

    log_str = label + " - " + time_record + "\n"

    f = open(filename, "a")
    f.write(log_str)
    f.close()

def notify_done (time, ntfy_url, title):
    timer_type  = pomo_or_timer(is_pomo(time))
    notif_suffix  = ' complete! \n' + ('(' + title + ')' if title else '')
    header = "'🍅🍅'" if is_pomo(time) else "''"

    sh("notify-send " + header + "'" + timer_type + " done!' &")

    requests.post(url,
                  data = (timer_type + notif_suffix).encode(),
                  headers = { "Tags": "tomato,tomato" })

    # maybe there's a libnotify implementation for python... duh

def set_timer (seconds, ntfy_url, title):
    msg = pomo_format(seconds, title, " set")
    if msg:
        print(msg)

    if is_pomo(seconds):
        sh("killall -SIGUSR1 dunst") # pause
        sleep(seconds)
        sh("killall -SIGUSR2 dunst") # resume

    else:
        sleep(seconds)

    notify_done(seconds, ntfy_url, title)
    sh(timer_cmd)

def parse_arguments ():
    human_time = argv[1] if len(argv) > 1 else default_duration
    seconds = parse_time(human_time)
    pomo_type = pomo_or_timer (is_pomo(seconds))

    # if the first argument is a time, don't include it in the label
    title = " ".join([argv[i] for i in range ((2 if human_time else 1), len(argv))])

    return [human_time, seconds, pomo_type, title]


[human_time, seconds, pomo_type, title] = parse_arguments()

set_timer(seconds, url, title)
log_time(logfile, pomo_type, title, human_time, seconds)
